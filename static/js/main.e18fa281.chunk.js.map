{"version":3,"sources":["logo.svg","MockList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MockList","props","handleGet","axios","get","then","res","list","data","setState","console","log","handlePost","showForm","submit","e","preventDefault","newUser","createdAt","Date","name","email","resumeUrl","resume","post","handleDelete","showDeletForm","submitDelete","id","url","delete","catch","err","handleId","target","value","handleName","handleEmail","handleResume","state","onClick","this","onSubmit","type","onChange","map","item","index","key","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e18fa281.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport axios from \"axios\";\n//import * as ReactBootstrap from \"react-bootstrap\";\n \nclass MockList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [],\n      showForm: false,\n      showDeletForm:false,\n    };\n this.id='';\n    this.createdAt='';\n    this.name='';\n    this.email='';\n    this.resume='';\n  }\n \n  handleGet = () => {\n    axios\n      .get(\"https://5efa2d72bc5f8f0016c67738.mockapi.io/application\")\n      .then((res) => {\n        const list = res.data;\n        this.setState({ list });\n        console.log(res.data);\n      });\n  };\n  \n \n  handlePost = () => {\n    this.setState({\n      showForm: true,\n    });\n  };\n  submit = (e) => {\n    e.preventDefault();\n    const newUser= {\n      createdAt:new Date(),\n      name: this.name,\n      email: this.email,\n      resumeUrl:this.resume\n    }\n    axios.post('https://5efa2d72bc5f8f0016c67738.mockapi.io/application', newUser)\n    .then(res => console.log(res.data));\n \n \n  this.setState({\n    showForm: false,\n  });\n};\n\n\n\nhandleDelete=()=>{\n  this.setState({\n    showDeletForm:true\n  })\n   \n}\nsubmitDelete=(e)=>{\n \n    e.preventDefault();\n    const id=this.id;\n    const url =`https://5efa2d72bc5f8f0016c67738.mockapi.io/application/${this.id}`\n\n    console.log(typeof id);\n    axios.delete(url).then(res => console.log(res.data)).catch((err)=>console.log(err));\n    this.setState({\n      showDeletForm: false,\n    });\n}\n\n//----------------Handling Inputs\nhandleId=(e)=>{\n  this.id=e.target.value;\n}\nhandleName = (e) => {\n    this.name = e.target.value;\n};\nhandleEmail= (e) => {\n  this.email = e.target.value;\n};\nhandleResume = (e) => {\n  this.resume = e.target.value;\n};\n\n//----------------------------\n\nrender() {\n  return (\n    <div>\n      \n      <button onClick={this.handleGet}>Get</button>\n      <button onClick={this.handlePost}>Post</button>\n      <button onClick={this.handleDelete}>Delete</button>\n\n      {this.state.showForm && (\n        <form onSubmit={this.submit}>\n        \n          <label>Name</label>{\" \"}\n          <input type=\"text\" onChange={this.handleName}></input>\n          <label>Email</label>{\" \"}\n          <input type=\"email\" onChange={this.handleEmail}></input>\n          <label>Resume_url</label>\n          <input type=\"text\" onChange={this.handleResume}></input>\n          <input type=\"submit\"></input>\n        </form>\n      )}\n\n      {\n        this.state.showDeletForm&&<form onSubmit={this.submitDelete}>\n          <label>Id</label><input type=\"text\" onChange={this.handleId}></input>\n          <input type=\"submit\"></input>\n        </form>\n      }\n      <table>\n          <thead>\n            <tr>\n              <th>UserId</th>\n              <th> createdAt</th>\n              <th>Name</th>\n              <th>Email</th>\n              <th>Resume_url</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.list.map((item, index) => (\n              <tr key={index}>\n                <td>{item.id}</td>\n                <td>{item.createdAt}</td>\n                <td>{item.name}</td>\n                <td>{item.email}</td>\n                <td>{item.resumeUrl}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n \nexport default MockList;\n \n","import React,{Component} from 'react';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css';\nimport MockList from './MockList'\nclass  App extends Component {\n \n  render(){\n  return (\n    <div className=\"App\">\n      <MockList />\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}